// Generated by gencpp from file micro_epsilon_scancontrol_msgs/GetResolutionResponse.msg
// DO NOT EDIT!


#ifndef MICRO_EPSILON_SCANCONTROL_MSGS_MESSAGE_GETRESOLUTIONRESPONSE_H
#define MICRO_EPSILON_SCANCONTROL_MSGS_MESSAGE_GETRESOLUTIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace micro_epsilon_scancontrol_msgs
{
template <class ContainerAllocator>
struct GetResolutionResponse_
{
  typedef GetResolutionResponse_<ContainerAllocator> Type;

  GetResolutionResponse_()
    : resolution(0)
    , return_code(0)  {
    }
  GetResolutionResponse_(const ContainerAllocator& _alloc)
    : resolution(0)
    , return_code(0)  {
  (void)_alloc;
    }



   typedef uint32_t _resolution_type;
  _resolution_type resolution;

   typedef int32_t _return_code_type;
  _return_code_type return_code;





  typedef boost::shared_ptr< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetResolutionResponse_

typedef ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<std::allocator<void> > GetResolutionResponse;

typedef boost::shared_ptr< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse > GetResolutionResponsePtr;
typedef boost::shared_ptr< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse const> GetResolutionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator1> & lhs, const ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.resolution == rhs.resolution &&
    lhs.return_code == rhs.return_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator1> & lhs, const ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace micro_epsilon_scancontrol_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b29e2945c59c53f7e032bc7769074912";
  }

  static const char* value(const ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb29e2945c59c53f7ULL;
  static const uint64_t static_value2 = 0xe032bc7769074912ULL;
};

template<class ContainerAllocator>
struct DataType< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "micro_epsilon_scancontrol_msgs/GetResolutionResponse";
  }

  static const char* value(const ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 resolution\n"
"int32 return_code\n"
;
  }

  static const char* value(const ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.resolution);
      stream.next(m.return_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetResolutionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::micro_epsilon_scancontrol_msgs::GetResolutionResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "resolution: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.resolution);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "return_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.return_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICRO_EPSILON_SCANCONTROL_MSGS_MESSAGE_GETRESOLUTIONRESPONSE_H
