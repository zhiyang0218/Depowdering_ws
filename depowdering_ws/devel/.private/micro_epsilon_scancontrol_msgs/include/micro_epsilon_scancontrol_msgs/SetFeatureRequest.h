// Generated by gencpp from file micro_epsilon_scancontrol_msgs/SetFeatureRequest.msg
// DO NOT EDIT!


#ifndef MICRO_EPSILON_SCANCONTROL_MSGS_MESSAGE_SETFEATUREREQUEST_H
#define MICRO_EPSILON_SCANCONTROL_MSGS_MESSAGE_SETFEATUREREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace micro_epsilon_scancontrol_msgs
{
template <class ContainerAllocator>
struct SetFeatureRequest_
{
  typedef SetFeatureRequest_<ContainerAllocator> Type;

  SetFeatureRequest_()
    : setting(0)
    , value(0)  {
    }
  SetFeatureRequest_(const ContainerAllocator& _alloc)
    : setting(0)
    , value(0)  {
  (void)_alloc;
    }



   typedef uint32_t _setting_type;
  _setting_type setting;

   typedef uint32_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetFeatureRequest_

typedef ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<std::allocator<void> > SetFeatureRequest;

typedef boost::shared_ptr< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest > SetFeatureRequestPtr;
typedef boost::shared_ptr< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest const> SetFeatureRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator1> & lhs, const ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator2> & rhs)
{
  return lhs.setting == rhs.setting &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator1> & lhs, const ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace micro_epsilon_scancontrol_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3072132c0245282731d0c5ccc2b15093";
  }

  static const char* value(const ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3072132c02452827ULL;
  static const uint64_t static_value2 = 0x31d0c5ccc2b15093ULL;
};

template<class ContainerAllocator>
struct DataType< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "micro_epsilon_scancontrol_msgs/SetFeatureRequest";
  }

  static const char* value(const ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 setting\n"
"uint32 value\n"
;
  }

  static const char* value(const ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.setting);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetFeatureRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::micro_epsilon_scancontrol_msgs::SetFeatureRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "setting: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.setting);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "value: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICRO_EPSILON_SCANCONTROL_MSGS_MESSAGE_SETFEATUREREQUEST_H
