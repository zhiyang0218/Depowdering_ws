// Generated by gencpp from file add_post_pro_simulation/APPChangeHeightRequest.msg
// DO NOT EDIT!


#ifndef ADD_POST_PRO_SIMULATION_MESSAGE_APPCHANGEHEIGHTREQUEST_H
#define ADD_POST_PRO_SIMULATION_MESSAGE_APPCHANGEHEIGHTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace add_post_pro_simulation
{
template <class ContainerAllocator>
struct APPChangeHeightRequest_
{
  typedef APPChangeHeightRequest_<ContainerAllocator> Type;

  APPChangeHeightRequest_()
    : z_delta(0.0)  {
    }
  APPChangeHeightRequest_(const ContainerAllocator& _alloc)
    : z_delta(0.0)  {
  (void)_alloc;
    }



   typedef float _z_delta_type;
  _z_delta_type z_delta;





  typedef boost::shared_ptr< ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> const> ConstPtr;

}; // struct APPChangeHeightRequest_

typedef ::add_post_pro_simulation::APPChangeHeightRequest_<std::allocator<void> > APPChangeHeightRequest;

typedef boost::shared_ptr< ::add_post_pro_simulation::APPChangeHeightRequest > APPChangeHeightRequestPtr;
typedef boost::shared_ptr< ::add_post_pro_simulation::APPChangeHeightRequest const> APPChangeHeightRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator1> & lhs, const ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator2> & rhs)
{
  return lhs.z_delta == rhs.z_delta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator1> & lhs, const ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace add_post_pro_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc5c11c84cdf4837ef607818cd76c4ae";
  }

  static const char* value(const ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc5c11c84cdf4837ULL;
  static const uint64_t static_value2 = 0xef607818cd76c4aeULL;
};

template<class ContainerAllocator>
struct DataType< ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "add_post_pro_simulation/APPChangeHeightRequest";
  }

  static const char* value(const ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 z_delta\n"
;
  }

  static const char* value(const ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.z_delta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct APPChangeHeightRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::add_post_pro_simulation::APPChangeHeightRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "z_delta: ";
    Printer<float>::stream(s, indent + "  ", v.z_delta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ADD_POST_PRO_SIMULATION_MESSAGE_APPCHANGEHEIGHTREQUEST_H
