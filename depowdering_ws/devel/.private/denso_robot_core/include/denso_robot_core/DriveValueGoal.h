// Generated by gencpp from file denso_robot_core/DriveValueGoal.msg
// DO NOT EDIT!


#ifndef DENSO_ROBOT_CORE_MESSAGE_DRIVEVALUEGOAL_H
#define DENSO_ROBOT_CORE_MESSAGE_DRIVEVALUEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <denso_robot_core/Joints.h>

namespace denso_robot_core
{
template <class ContainerAllocator>
struct DriveValueGoal_
{
  typedef DriveValueGoal_<ContainerAllocator> Type;

  DriveValueGoal_()
    : pose()
    , pass(0)
    , option()  {
    }
  DriveValueGoal_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , pass(0)
    , option(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::denso_robot_core::Joints_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::denso_robot_core::Joints_<ContainerAllocator> >> _pose_type;
  _pose_type pose;

   typedef int32_t _pass_type;
  _pass_type pass;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _option_type;
  _option_type option;





  typedef boost::shared_ptr< ::denso_robot_core::DriveValueGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::denso_robot_core::DriveValueGoal_<ContainerAllocator> const> ConstPtr;

}; // struct DriveValueGoal_

typedef ::denso_robot_core::DriveValueGoal_<std::allocator<void> > DriveValueGoal;

typedef boost::shared_ptr< ::denso_robot_core::DriveValueGoal > DriveValueGoalPtr;
typedef boost::shared_ptr< ::denso_robot_core::DriveValueGoal const> DriveValueGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::denso_robot_core::DriveValueGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::denso_robot_core::DriveValueGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::denso_robot_core::DriveValueGoal_<ContainerAllocator1> & lhs, const ::denso_robot_core::DriveValueGoal_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.pass == rhs.pass &&
    lhs.option == rhs.option;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::denso_robot_core::DriveValueGoal_<ContainerAllocator1> & lhs, const ::denso_robot_core::DriveValueGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace denso_robot_core

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::denso_robot_core::DriveValueGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::denso_robot_core::DriveValueGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::denso_robot_core::DriveValueGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::denso_robot_core::DriveValueGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::denso_robot_core::DriveValueGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::denso_robot_core::DriveValueGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::denso_robot_core::DriveValueGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52550839b00a7359fb2ca9004e5bc7c2";
  }

  static const char* value(const ::denso_robot_core::DriveValueGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52550839b00a7359ULL;
  static const uint64_t static_value2 = 0xfb2ca9004e5bc7c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::denso_robot_core::DriveValueGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "denso_robot_core/DriveValueGoal";
  }

  static const char* value(const ::denso_robot_core::DriveValueGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::denso_robot_core::DriveValueGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"Joints[] pose\n"
"int32    pass\n"
"string   option\n"
"\n"
"================================================================================\n"
"MSG: denso_robot_core/Joints\n"
"int32   joint\n"
"float64 value\n"
"\n"
;
  }

  static const char* value(const ::denso_robot_core::DriveValueGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::denso_robot_core::DriveValueGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.pass);
      stream.next(m.option);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriveValueGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::denso_robot_core::DriveValueGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::denso_robot_core::DriveValueGoal_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "pose: ";
    if (v.pose.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::denso_robot_core::Joints_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.pose[i]);
    }
    if (v.pose.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pass: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pass);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "option: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.option);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DENSO_ROBOT_CORE_MESSAGE_DRIVEVALUEGOAL_H
